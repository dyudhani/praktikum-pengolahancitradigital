# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Modul2_PCD.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPixmap, QImage, QColor, QPixelFormat
from PyQt5.QtWidgets import QFileDialog, QMessageBox, QAction, QMainWindow, QSlider, QPushButton, QToolTip, QApplication
from PIL import Image, ImageOps, ImageEnhance
from PIL.ImageQt import ImageQt
import cv2
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(888, 683)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.btnOpenFile = QtWidgets.QPushButton(self.centralwidget)
        self.btnOpenFile.setGeometry(QtCore.QRect(679, 110, 151, 28))
        self.btnOpenFile.setObjectName("btnOpenFile")
        self.pictureBox1 = QtWidgets.QLabel(self.centralwidget)
        self.pictureBox1.setEnabled(True)
        self.pictureBox1.setGeometry(QtCore.QRect(310, 110, 261, 241))
        self.pictureBox1.setFrameShape(QtWidgets.QFrame.Panel)
        self.pictureBox1.setFrameShadow(QtWidgets.QFrame.Raised)
        self.pictureBox1.setText("")
        self.pictureBox1.setScaledContents(True)
        self.pictureBox1.setObjectName("pictureBox1")
        self.pictureBox2 = QtWidgets.QLabel(self.centralwidget)
        self.pictureBox2.setEnabled(True)
        self.pictureBox2.setGeometry(QtCore.QRect(120, 390, 261, 231))
        self.pictureBox2.setFrameShape(QtWidgets.QFrame.Panel)
        self.pictureBox2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.pictureBox2.setText("")
        self.pictureBox2.setScaledContents(True)
        self.pictureBox2.setObjectName("pictureBox2")
        self.pictureBox3 = QtWidgets.QLabel(self.centralwidget)
        self.pictureBox3.setEnabled(True)
        self.pictureBox3.setGeometry(QtCore.QRect(500, 390, 261, 231))
        self.pictureBox3.setFrameShape(QtWidgets.QFrame.Panel)
        self.pictureBox3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.pictureBox3.setText("")
        self.pictureBox3.setScaledContents(True)
        self.pictureBox3.setObjectName("pictureBox3")
        self.btnGrayscale = QtWidgets.QPushButton(self.centralwidget)
        self.btnGrayscale.setGeometry(QtCore.QRect(679, 150, 151, 28))
        self.btnGrayscale.setObjectName("btnGrayscale")
        self.btnBiner = QtWidgets.QPushButton(self.centralwidget)
        self.btnBiner.setGeometry(QtCore.QRect(679, 190, 151, 28))
        self.btnBiner.setObjectName("btnBiner")
        self.btnExit = QtWidgets.QPushButton(self.centralwidget)
        self.btnExit.setGeometry(QtCore.QRect(679, 230, 151, 28))
        self.btnExit.setObjectName("btnExit")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(270, 0, 351, 51))
        font = QtGui.QFont()
        font.setFamily("Keep Calm")
        font.setPointSize(14)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.labelCitraAsli = QtWidgets.QLabel(self.centralwidget)
        self.labelCitraAsli.setGeometry(QtCore.QRect(390, 60, 91, 31))
        self.labelCitraAsli.setFrameShape(QtWidgets.QFrame.Box)
        self.labelCitraAsli.setAlignment(QtCore.Qt.AlignCenter)
        self.labelCitraAsli.setObjectName("labelCitraAsli")
        self.labelCitraAsli_2 = QtWidgets.QLabel(self.centralwidget)
        self.labelCitraAsli_2.setGeometry(QtCore.QRect(200, 350, 91, 31))
        self.labelCitraAsli_2.setFrameShape(QtWidgets.QFrame.Box)
        self.labelCitraAsli_2.setAlignment(QtCore.Qt.AlignCenter)
        self.labelCitraAsli_2.setObjectName("labelCitraAsli_2")
        self.labelCitraAsli_3 = QtWidgets.QLabel(self.centralwidget)
        self.labelCitraAsli_3.setGeometry(QtCore.QRect(590, 350, 81, 31))
        self.labelCitraAsli_3.setFrameShape(QtWidgets.QFrame.Box)
        self.labelCitraAsli_3.setAlignment(QtCore.Qt.AlignCenter)
        self.labelCitraAsli_3.setObjectName("labelCitraAsli_3")
        self.horizontalSlider = QtWidgets.QSlider(self.centralwidget)
        self.horizontalSlider.setGeometry(QtCore.QRect(739, 290, 131, 22))
        self.horizontalSlider.setMinimum(-255)
        self.horizontalSlider.setMaximum(255)
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(610, 290, 91, 20))
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.valueSlider = QtWidgets.QLabel(self.centralwidget)
        self.valueSlider.setGeometry(QtCore.QRect(690, 290, 41, 20))
        self.valueSlider.setAlignment(QtCore.Qt.AlignCenter)
        self.valueSlider.setObjectName("valueSlider")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 888, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuEdit = QtWidgets.QMenu(self.menubar)
        self.menuEdit.setObjectName("menuEdit")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionNew = QtWidgets.QAction(MainWindow)
        self.actionNew.setObjectName("actionNew")
        self.actionSave = QtWidgets.QAction(MainWindow)
        self.actionSave.setObjectName("actionSave")
        self.actionCopy = QtWidgets.QAction(MainWindow)
        self.actionCopy.setObjectName("actionCopy")
        self.actionPaste = QtWidgets.QAction(MainWindow)
        self.actionPaste.setObjectName("actionPaste")
        self.menuFile.addAction(self.actionNew)
        self.menuFile.addAction(self.actionSave)
        self.menuEdit.addAction(self.actionCopy)
        self.menuEdit.addAction(self.actionPaste)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.btnOpenFile.clicked.connect(self.openImage)

        self.btnGrayscale.clicked.connect(self.grayscale)

        self.btnBiner.clicked.connect(self.binaryImage)

        self.btnExit.clicked.connect(self.closeEvent)

        self.horizontalSlider.valueChanged[int].connect(self.brightnessValue)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.btnOpenFile.setText(_translate("MainWindow", "OPEN IMAGE"))
        self.btnGrayscale.setText(_translate("MainWindow", "Grayscale"))
        self.btnBiner.setText(_translate("MainWindow", "Biner"))
        self.btnExit.setText(_translate("MainWindow", "Exit"))
        self.label.setText(_translate("MainWindow", "PERBAIKAN KUALITAS CITRA"))
        self.labelCitraAsli.setText(_translate("MainWindow", "Citra Asli"))
        self.labelCitraAsli_2.setText(_translate("MainWindow", "Citra Grayscale"))
        self.labelCitraAsli_3.setText(_translate("MainWindow", "Citra Biner"))
        self.label_2.setText(_translate("MainWindow", "Brightness :"))
        self.valueSlider.setText(_translate("MainWindow", "0"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuEdit.setTitle(_translate("MainWindow", "Edit"))
        self.actionNew.setText(_translate("MainWindow", "New"))
        self.actionSave.setText(_translate("MainWindow", "Save"))
        self.actionCopy.setText(_translate("MainWindow", "Copy"))
        self.actionPaste.setText(_translate("MainWindow", "Paste"))

        self.brightnessValueNow = 0

    def openImage(self):
        self.imageName, imgType = QFileDialog.getOpenFileName(self.centralwidget, "Open Image", "", "*.jpg;;*.bmp;;All Files(*)")
        print("Type : ", type(self.imageName))
        jpg = QPixmap(self.imageName)

        pictureBox1 = self.pictureBox1
        pictureBox1.setPixmap(jpg)

    def grayscale(self):
        img = mpimg.imread(self.imageName)
        R, G, B = img[:,:,0], img[:,:,1], img[:,:,2]
        imgGray = 0.2989 * R + 0.5870 * G + 0.1140 * B

        print("imgGray type : ", type(imgGray))

        image = plt.imsave("output.jpg", imgGray, cmap="gray")

        jpg = QPixmap("output.jpg")

        self.pictureBox2.setPixmap(jpg)

    def binaryImage(self):
        imgFile = Image.open(self.imageName)
        img = imgFile.convert('L')

        filterFunction = lambda x: 0 if x < 128 else 255
        binImg = img.point(filterFunction, '1')

        pic = ImageQt(binImg)
        jpg = QtGui.QPixmap.fromImage(pic)
        self.pictureBox3.setPixmap(jpg)

    def brightnessValue(self, value):
        self.brightnessValueNow = value

        valueSlider = self.valueSlider
        valueSlider.setText(str(self.brightnessValueNow))

        image = cv2.imread("output.jpg", cv2.IMREAD_COLOR).astype(np.float32)/255.0

        hlsImg = cv2.cvtColor(image, cv2.COLOR_BGR2HLS)
        hlsCopy = np.copy(hlsImg)

        hlsCopy[:,:,1] = (1.0 + self.brightnessValueNow / 255) * hlsCopy[:,:,1]
        hlsCopy[:, :, 1][hlsCopy[:, :, 1] > 1] = 1
        lsImg = cv2.cvtColor(hlsCopy, cv2.COLOR_HLS2BGR)

        lsImg *= 255
        lsImg = lsImg.astype(np.uint8)
        height, width, channel = lsImg.shape

        qImg = QImage(lsImg.data, width, height, width*channel, QImage.Format_BGR888)
        pic = QtGui.QPixmap(qImg)
        self.pictureBox3.setPixmap(pic)

    def closeEvent(self, event):
        closeBox = QMessageBox()
        closeBox.setText("Are you sure you want to close the application?")
        closeBox.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
        reply = closeBox.exec()

        if reply == QMessageBox.Yes:
            print("Thank you, Closing...")
            sys.exit(app.exec_())
        else:
            print("Thank you, Canceling...")


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
